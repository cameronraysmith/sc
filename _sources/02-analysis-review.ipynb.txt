{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "59520860-b69b-4e5d-a049-2325c3e70e5b",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    },
    "tags": []
   },
   "source": [
    "# Basic single-cell analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6950c1b-5cbb-4be5-83c4-9029d7f3d969",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    },
    "tags": []
   },
   "source": [
    "## Overview"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1591584-6e8d-4d2f-aef6-4a7269e352aa",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    },
    "tags": []
   },
   "source": [
    "This notebook follows the tutorial by [mousepixels/sanbomics](https://github.com/mousepixels/sanbomics/blob/main/single_cell_analysis_complete_class.ipynb), which has an accompanying [screencast](https://youtu.be/uvyG9yLuNSE?t=319).\n",
    "\n",
    "Analysis is illustrated with single-nucleus RNA sequencing data from the following paper <cite data-cite=\"Melms2021-bj\">Melms et al. (2021)</cite>\n",
    "\n",
    "> Melms JC, Biermann J, Huang H, Wang Y, Nair A, Tagore S, et al.\n",
    "A molecular single-cell lung atlas of lethal COVID-19.\n",
    "Nature. 2021;595: 114–119. [doi:10.1038/s41586-021-03569-0](https://doi.org/10.1038/s41586-021-03569-0)\n",
    "\n",
    "This paper examined 116,000 nuclei from the lungs of nineteen patients who underwent autopsy following death in association with COVID-19. Findings reported in the abstract of the paper include:\n",
    "\n",
    "1. activated monocyte-derived macrophages and alveolar macrophages\n",
    "1. impaired T cell activation\n",
    "1. monocyte/macrophage-derived interleukin-1β and epithelial cell-derived interleukin-6\n",
    "1. alveolar type 2 cells adopted an inflammation-associated transient progenitor cell state and failed to undergo full transition into alveolar type 1 cells\n",
    "1. expansion of CTHRC1+ pathological fibroblasts\n",
    "1. protein activity and ligand–receptor interactions suggest putative drug targets\n",
    "\n",
    "This notebook makes extensive use of <cite data-cite=\"Wolf2018-nu\">Wolf et al. (2018)</cite> and <cite data-cite=\"Lopez2018-em\">Lopez et al. (2018)</cite> including updates that have been made to the underlying software packages, [scanpy](https://github.com/scverse/scanpy) and [scvi-tools](https://github.com/scverse/scvi-tools), since their initial publication."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1bf91286-2ec3-45a5-960f-349c7ab00e92",
   "metadata": {
    "incorrectly_encoded_metadata": "tags=[] slideshow={\"slide_type\": \"slide\"} jp-MarkdownHeadingCollapsed=true",
    "slideshow": {
     "slide_type": "slide"
    },
    "tags": []
   },
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37d85862-f21b-486e-abb7-6331cb0c8431",
   "metadata": {
    "incorrectly_encoded_metadata": "tags=[] slideshow={\"slide_type\": \"subslide\"} jp-MarkdownHeadingCollapsed=true",
    "slideshow": {
     "slide_type": "subslide"
    },
    "tags": []
   },
   "source": [
    "### Import libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f9a8d232-554e-4456-a18f-2c2093c3d552",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T19:46:52.905885Z",
     "iopub.status.busy": "2022-09-27T19:46:52.904959Z",
     "iopub.status.idle": "2022-09-27T19:46:55.134084Z",
     "shell.execute_reply": "2022-09-27T19:46:55.133071Z",
     "shell.execute_reply.started": "2022-09-27T19:46:52.905769Z"
    },
    "slideshow": {
     "slide_type": "fragment"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from inspect import getmembers\n",
    "from pprint import pprint\n",
    "from types import FunctionType\n",
    "\n",
    "import scanpy as sc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7f0e5b1-c6bf-4339-8b24-dbcc5f20ade4",
   "metadata": {
    "incorrectly_encoded_metadata": "tags=[] slideshow={\"slide_type\": \"subslide\"} jp-MarkdownHeadingCollapsed=true",
    "slideshow": {
     "slide_type": "subslide"
    },
    "tags": []
   },
   "source": [
    "### Setup plotting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7753e0a8-2531-4072-bada-0ed4f1ce2424",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T19:46:55.136592Z",
     "iopub.status.busy": "2022-09-27T19:46:55.136013Z",
     "iopub.status.idle": "2022-09-27T19:46:55.141085Z",
     "shell.execute_reply": "2022-09-27T19:46:55.140114Z",
     "shell.execute_reply.started": "2022-09-27T19:46:55.136562Z"
    },
    "slideshow": {
     "slide_type": "fragment"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.font_manager\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# import matplotlib_inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0a66d0c4-f945-4292-af42-41a4c882c69d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T19:46:55.142821Z",
     "iopub.status.busy": "2022-09-27T19:46:55.142538Z",
     "iopub.status.idle": "2022-09-27T19:46:55.151919Z",
     "shell.execute_reply": "2022-09-27T19:46:55.150606Z",
     "shell.execute_reply.started": "2022-09-27T19:46:55.142797Z"
    },
    "slideshow": {
     "slide_type": "fragment"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# fonts_path = \"/usr/share/texmf/fonts/opentype/public/lm/\" #ubuntu\n",
    "# fonts_path = \"~/Library/Fonts/\" # macos\n",
    "fonts_path = \"/usr/share/fonts/OTF/\"  # arch\n",
    "# user_path = \"$HOME/\" # user\n",
    "# fonts_path = user_path + \"fonts/latinmodern/opentype/public/lm/\"  # home\n",
    "matplotlib.font_manager.fontManager.addfont(fonts_path + \"lmsans10-regular.otf\")\n",
    "matplotlib.font_manager.fontManager.addfont(fonts_path + \"lmroman10-regular.otf\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "19089090-2e39-48b9-8347-aaa8c7d73365",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T19:46:55.153875Z",
     "iopub.status.busy": "2022-09-27T19:46:55.153575Z",
     "iopub.status.idle": "2022-09-27T19:46:55.164857Z",
     "shell.execute_reply": "2022-09-27T19:46:55.163883Z",
     "shell.execute_reply.started": "2022-09-27T19:46:55.153850Z"
    },
    "slideshow": {
     "slide_type": "fragment"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# https://stackoverflow.com/a/36622238/446907\n",
    "%config InlineBackend.figure_formats = ['svg']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e2ee4e70-7272-4ae2-9f15-c9d9401175de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T19:46:55.167271Z",
     "iopub.status.busy": "2022-09-27T19:46:55.166962Z",
     "iopub.status.idle": "2022-09-27T19:46:55.173731Z",
     "shell.execute_reply": "2022-09-27T19:46:55.172824Z",
     "shell.execute_reply.started": "2022-09-27T19:46:55.167246Z"
    },
    "slideshow": {
     "slide_type": "fragment"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "plt.style.use(\"default\")  # reset default parameters\n",
    "# https://stackoverflow.com/a/3900167/446907\n",
    "plt.rcParams.update(\n",
    "    {\n",
    "        \"font.size\": 16,\n",
    "        \"font.family\": [\"sans-serif\"],\n",
    "        \"font.serif\": [\"Latin Modern Roman\"] + plt.rcParams[\"font.serif\"],\n",
    "        \"font.sans-serif\": [\"Latin Modern Sans\"] + plt.rcParams[\"font.sans-serif\"],\n",
    "    }\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b276e8e9-465a-48b9-abb1-804023ad0452",
   "metadata": {
    "incorrectly_encoded_metadata": "tags=[] slideshow={\"slide_type\": \"subslide\"} jp-MarkdownHeadingCollapsed=true",
    "slideshow": {
     "slide_type": "subslide"
    },
    "tags": []
   },
   "source": [
    "### Utility functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b00d10ed-2dca-4162-8b96-6b7a4e6d2495",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T19:46:55.175656Z",
     "iopub.status.busy": "2022-09-27T19:46:55.175294Z",
     "iopub.status.idle": "2022-09-27T19:46:55.181978Z",
     "shell.execute_reply": "2022-09-27T19:46:55.181052Z",
     "shell.execute_reply.started": "2022-09-27T19:46:55.175624Z"
    },
    "slideshow": {
     "slide_type": "fragment"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def attributes(obj):\n",
    "    \"\"\"\n",
    "    get object attributes\n",
    "    \"\"\"\n",
    "    disallowed_names = {\n",
    "        name for name, value in getmembers(type(obj)) if isinstance(value, FunctionType)\n",
    "    }\n",
    "    return {\n",
    "        name: getattr(obj, name)\n",
    "        for name in dir(obj)\n",
    "        if name[0] != \"_\" and name not in disallowed_names and hasattr(obj, name)\n",
    "    }\n",
    "\n",
    "\n",
    "def print_attributes(obj):\n",
    "    \"\"\"\n",
    "    print object attributes\n",
    "    \"\"\"\n",
    "    pprint(attributes(obj))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d4bcb6b-b476-4fec-b38d-bfa91470d91a",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    },
    "tags": []
   },
   "source": [
    "## Import data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7237d5b8-2eed-43b6-a99d-850def235b55",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    },
    "tags": []
   },
   "source": [
    "Here we review how the data were downloaded, and proceed to import and inspect the data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef4bb28d-cb0c-404a-a23b-add821f95335",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    },
    "tags": []
   },
   "source": [
    "### Data download"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "765825f9-3a14-4eba-9643-5cebe5f0ad62",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    },
    "tags": []
   },
   "source": [
    "Data with GEO accession [GSE171524](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE171524) was downloaded using [./data/download_geo_data.sh](./data/download_geo_data.sh) with parameters\n",
    "\n",
    "```bash\n",
    "./download_geo_data.sh \\\n",
    "       -a GSE132771 \\\n",
    "       -f 'ftp.*RAW.*' \\\n",
    "       -j '..|.supplementary_files?|..|.url?|select(length>0)'\n",
    "```\n",
    "\n",
    "A skeleton of this script that may work in this case is\n",
    "\n",
    "```bash\n",
    "!/usr/bin/env bash\n",
    "\n",
    "#-- debugging (comment to reduce stderr output)\n",
    "#-- https://wiki.bash-hackers.org/scripting/debuggingtips\n",
    "export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'\n",
    "set -o xtrace\n",
    "\n",
    "# get metadata\n",
    "# Melms JC, Biermann J, Huang H, Wang Y, Nair A, Tagore S, et al.\n",
    "# A molecular single-cell lung atlas of lethal COVID-19.\n",
    "# Nature. 2021;595: 114–119. doi:10.1038/s41586-021-03569-0\n",
    "# GSE171524\n",
    "ffq -l 1 -o GSE171524.json GSE171524\n",
    "\n",
    "# download raw data\n",
    "wget ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE171nnn/GSE171524/suppl/GSE171524_RAW.tar\n",
    "\n",
    "# list contents\n",
    "tar -tvf GSE171524_RAW.tar\n",
    "\n",
    "# untar\n",
    "mkdir -p GSE171524 && \\\n",
    "tar -xvf GSE171524_RAW.tar -C GSE171524\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f397a2cd-f736-4ad8-9c67-9489fb4175e4",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    },
    "tags": []
   },
   "source": [
    "### Data load"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "af6bd525-b037-46a1-bced-ec5c95fc27b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T19:49:05.980241Z",
     "iopub.status.busy": "2022-09-27T19:49:05.979268Z",
     "iopub.status.idle": "2022-09-27T19:49:37.400898Z",
     "shell.execute_reply": "2022-09-27T19:49:37.399816Z",
     "shell.execute_reply.started": "2022-09-27T19:49:05.980204Z"
    },
    "slideshow": {
     "slide_type": "fragment"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AnnData object with n_obs × n_vars = 6099 × 34546"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata = None\n",
    "adata = sc.read_csv(\"data/GSE171524/supplementary/GSM5226574_C51ctr_raw_counts.csv.gz\").T\n",
    "adata"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fc1706e-ed40-4e3f-aac1-9177f7bc3d8c",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    },
    "tags": []
   },
   "source": [
    "Note the `scanpy.read_csv` function accepts gzipped files."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c91ab10-ff83-46f4-84b1-98434d7a7331",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    },
    "tags": []
   },
   "source": [
    "### Data properties"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "681493e8-c15c-479a-bab8-b2f0e4a83c63",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-25T04:23:43.205691Z",
     "iopub.status.busy": "2022-09-25T04:23:43.204631Z",
     "iopub.status.idle": "2022-09-25T04:23:43.212649Z",
     "shell.execute_reply": "2022-09-25T04:23:43.211766Z",
     "shell.execute_reply.started": "2022-09-25T04:23:43.205645Z"
    },
    "slideshow": {
     "slide_type": "fragment"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "anndata._core.anndata.AnnData"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(adata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "54c464a4-3ce7-4ab9-8908-b75169b25f7e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-25T04:23:51.062344Z",
     "iopub.status.busy": "2022-09-25T04:23:51.061969Z",
     "iopub.status.idle": "2022-09-25T04:23:51.069282Z",
     "shell.execute_reply": "2022-09-25T04:23:51.068266Z",
     "shell.execute_reply.started": "2022-09-25T04:23:51.062314Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "anndata._core.anndata.AnnData"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(adata.T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "27b0621a-22d8-411d-a5fb-527c580280b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-25T04:23:55.783361Z",
     "iopub.status.busy": "2022-09-25T04:23:55.782991Z",
     "iopub.status.idle": "2022-09-25T04:23:55.797978Z",
     "shell.execute_reply": "2022-09-25T04:23:55.797111Z",
     "shell.execute_reply.started": "2022-09-25T04:23:55.783332Z"
    },
    "slideshow": {
     "slide_type": "fragment"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'T': AnnData object with n_obs × n_vars = 34546 × 6099,\n",
      " 'X': array([[0., 0., 0., ..., 0., 0., 0.],\n",
      "       [0., 0., 0., ..., 0., 0., 0.],\n",
      "       [0., 0., 0., ..., 0., 0., 0.],\n",
      "       ...,\n",
      "       [0., 0., 0., ..., 0., 0., 0.],\n",
      "       [0., 0., 0., ..., 0., 0., 0.],\n",
      "       [0., 0., 0., ..., 0., 0., 0.]], dtype=float32),\n",
      " 'file': Backing file manager: no file is set.,\n",
      " 'filename': None,\n",
      " 'is_view': False,\n",
      " 'isbacked': False,\n",
      " 'isview': False,\n",
      " 'layers': Layers with keys: ,\n",
      " 'n_obs': 6099,\n",
      " 'n_vars': 34546,\n",
      " 'obs': Empty DataFrame\n",
      "Columns: []\n",
      "Index: [TAGGTACCATGGCCAC-1_1, ATTCACTGTAACAGGC-1_1, TAACTTCCAACCACGC-1_1, TTGGGTACACGACAAG-1_1, AGGCCACAGAGTCACG-1_1, CACTGAAGTCGAAGCA-1_1, ACTGATGTCTGCACCT-1_1, TTACCGCCACTCAGAT-1_1, TTGGTTTTCCTAGCTC-1_1, TGGGAAGTCAGTGATC-1_1, CCACGAGTCTCTTAAC-1_1, ACTTCCGCACAACGCC-1_1, GGGAAGTAGCGACCCT-1_1, TGGTAGTTCCCGTGTT-1_1, CGCATAACATGCCGGT-1_1, TCTATCACAAGGCTTT-1_1, ATCCACCAGAGGTATT-1_1, TAACGACAGATGACCG-1_1, TCTTAGTGTATGAGGC-1_1, CACTTCGCAGTACTAC-1_1, GTCAAACAGAACGTGC-1_1, GCAACCGAGGGCAGGA-1_1, CATACTTTCATCACTT-1_1, AAGAACATCGGATTAC-1_1, GGGTATTGTACGATGG-1_1, CTGTAGATCAACGTGT-1_1, GTCATTTGTATCTCGA-1_1, CCTTGTGCAGAGGGTT-1_1, AAGTTCGCAACACGTT-1_1, TCATTCACAAATCAAG-1_1, TCCATGCCAACGACTT-1_1, TCCTTCTCAGTTTCAG-1_1, TGTGAGTCAAATGATG-1_1, AAACGAAGTACAGAGC-1_1, CAACCAAAGTATTCCG-1_1, CTTCTCTCAGAGACTG-1_1, TACAACGGTGGCTGAA-1_1, AACGGGACATGCCGGT-1_1, AACCAACGTTGGGAAC-1_1, TATATCCAGCGTCAGA-1_1, AGACAAACATCCCGTT-1_1, ATGACCAGTCTTCATT-1_1, CTTACCGTCAGACATC-1_1, CGGGACTGTTAGTTCG-1_1, ATTCATCCACTGAGTT-1_1, TCATGAGAGAGGCGGA-1_1, TCCCACATCTAGTACG-1_1, CTTCCTTCATATCTCT-1_1, CCGGACACACTCGATA-1_1, ACACGCGCACCTGTCT-1_1, GAATCGTCAGAAGTGC-1_1, GGTGGCTCAAGCTCTA-1_1, CCTGCATCACATATGC-1_1, GTGGGAAGTTAAAGTG-1_1, CGTTCTGGTACTAGCT-1_1, ACCCTCACAATAGTCC-1_1, GCCCGAACAAACTAAG-1_1, GTGGAAGCACATGACT-1_1, GTTGTGACATCGATAC-1_1, GACAGCCCAGGTCCGT-1_1, TAAGCACGTTGGCTAT-1_1, GGGACAAGTCACCACG-1_1, CTGGCAGGTTCGGTAT-1_1, GACTCAACACTGTGAT-1_1, GCCAGTGGTGTGGTCC-1_1, TCTAACTGTAGGCAGT-1_1, GAAGAATGTAGCTTGT-1_1, TCACTCGCAATCTCTT-1_1, CAAGACTTCCCACAGG-1_1, CAGATACGTGACTCTA-1_1, TGGGATTAGAGGGTCT-1_1, ACCTGAACACTCCTTG-1_1, GACACGCCACTCGATA-1_1, CTCATCGTCACCGCTT-1_1, AGGTAGGGTCCCTGTT-1_1, TACCCGTCAACACTAC-1_1, TGCTGAAAGACGGATC-1_1, ACACCAACACAACGCC-1_1, AAGATAGCAAATGGAT-1_1, CTTCAATGTGACAGGT-1_1, GAAGCGAAGAGTTGAT-1_1, GCCGTGACACAAGCCC-1_1, CCTCAACCATACAGGG-1_1, ACAAAGATCCACAGGC-1_1, CAGATACAGTCCCAGC-1_1, GGCAGTCTCCGGTTCT-1_1, TAAGTCGAGCTGAGCA-1_1, GAGACCCGTCTGTGCG-1_1, TAACACGCATGTGTCA-1_1, TCAATTCGTTCTCGCT-1_1, GCTTTCGCACAGTGTT-1_1, AACCAACAGATAACAC-1_1, ATCGGCGCACATCATG-1_1, TCATCCGCACGAGGAT-1_1, CTGATCCTCTTTACAC-1_1, TCACACCCAACTTCTT-1_1, TGAGGGACACCGTACG-1_1, GTGCACGTCATCTGTT-1_1, GGTAATCAGTTGCATC-1_1, ATACTTCCAAGGTCTT-1_1, ...]\n",
      "\n",
      "[6099 rows x 0 columns],\n",
      " 'obs_names': Index(['TAGGTACCATGGCCAC-1_1', 'ATTCACTGTAACAGGC-1_1', 'TAACTTCCAACCACGC-1_1',\n",
      "       'TTGGGTACACGACAAG-1_1', 'AGGCCACAGAGTCACG-1_1', 'CACTGAAGTCGAAGCA-1_1',\n",
      "       'ACTGATGTCTGCACCT-1_1', 'TTACCGCCACTCAGAT-1_1', 'TTGGTTTTCCTAGCTC-1_1',\n",
      "       'TGGGAAGTCAGTGATC-1_1',\n",
      "       ...\n",
      "       'AAGTCGTGTGTGAATA-1_1', 'GTCGTTCTCCAAGGGA-1_1', 'GTTTGGATCGGCCTTT-1_1',\n",
      "       'GTACAGTCACGTATAC-1_1', 'TCATGCCCAAGAGGTC-1_1', 'CGCCATTGTTTGCCGG-1_1',\n",
      "       'CACTGGGGTCTACGTA-1_1', 'CATACTTGTAGAGGAA-1_1', 'TTTGGTTTCCACGGAC-1_1',\n",
      "       'ATGCATGAGTCATGAA-1_1'],\n",
      "      dtype='object', length=6099),\n",
      " 'obsm': AxisArrays with keys: ,\n",
      " 'obsp': PairwiseArrays with keys: ,\n",
      " 'raw': None,\n",
      " 'shape': (6099, 34546),\n",
      " 'uns': OverloadedDict, wrapping:\n",
      "\tOrderedDict()\n",
      "With overloaded keys:\n",
      "\t['neighbors'].,\n",
      " 'var': Empty DataFrame\n",
      "Columns: []\n",
      "Index: [AL627309.1, AL627309.5, AL627309.4, AL669831.2, LINC01409, FAM87B, LINC01128, LINC00115, FAM41C, AL645608.6, AL645608.2, LINC02593, SAMD11, NOC2L, KLHL17, PLEKHN1, PERM1, AL645608.7, HES4, ISG15, AL645608.1, AGRN, C1orf159, AL390719.3, LINC01342, AL390719.2, TTLL10-AS1, TTLL10, TNFRSF18, TNFRSF4, SDF4, B3GALT6, C1QTNF12, UBE2J2, LINC01786, SCNN1D, ACAP3, PUSL1, INTS11, AL139287.1, CPTP, DVL1, MXRA8, AURKAIP1, CCNL2, MRPL20-AS1, MRPL20, AL391244.2, ANKRD65, AL391244.1, LINC01770, VWA1, ATAD3C, ATAD3B, ATAD3A, TMEM240, SSU72, AL645728.1, FNDC10, AL691432.4, AL691432.2, MIB2, MMP23B, CDK11B, FO704657.1, SLC35E2B, CDK11A, SLC35E2A, NADK, GNB1, AL109917.1, CALML6, TMEM52, CFAP74, GABRD, AL391845.1, PRKCZ, AL590822.2, PRKCZ-AS1, FAAP20, AL590822.1, SKI, AL590822.3, MORN1, AL589739.1, AL513477.2, RER1, PEX10, PLCH2, AL139246.4, PANK4, HES5, AL139246.5, TNFRSF14-AS1, TNFRSF14, AL139246.3, PRXL2B, MMEL1, TTC34, AC242022.2, ...]\n",
      "\n",
      "[34546 rows x 0 columns],\n",
      " 'var_names': Index(['AL627309.1', 'AL627309.5', 'AL627309.4', 'AL669831.2', 'LINC01409',\n",
      "       'FAM87B', 'LINC01128', 'LINC00115', 'FAM41C', 'AL645608.6',\n",
      "       ...\n",
      "       'AC087190.2', 'AC136428.1', 'AC019183.1', 'AC105094.1', 'AC010485.1',\n",
      "       'VN1R2', 'AL031676.1', 'SMIM34A', 'AL050402.1', 'AL445072.1'],\n",
      "      dtype='object', length=34546),\n",
      " 'varm': AxisArrays with keys: ,\n",
      " 'varp': PairwiseArrays with keys: }\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_1135/22660072.py:11: DeprecationWarning: Use is_view instead of isview, isview will be removed in the future.\n",
      "  if name[0] != \"_\" and name not in disallowed_names and hasattr(obj, name)\n",
      "/tmp/ipykernel_1135/22660072.py:9: DeprecationWarning: Use is_view instead of isview, isview will be removed in the future.\n",
      "  name: getattr(obj, name)\n"
     ]
    }
   ],
   "source": [
    "print_attributes(adata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "dd8f7ca9-f5c8-404e-bfcb-c584882c1b31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T02:51:35.741593Z",
     "iopub.status.busy": "2022-09-27T02:51:35.741190Z",
     "iopub.status.idle": "2022-09-27T02:51:35.755673Z",
     "shell.execute_reply": "2022-09-27T02:51:35.754567Z",
     "shell.execute_reply.started": "2022-09-27T02:51:35.741563Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>clusters_coarse</th>\n",
       "      <th>clusters</th>\n",
       "      <th>S_score</th>\n",
       "      <th>G2M_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AAACCTGAGAGGGATA</th>\n",
       "      <td>Pre-endocrine</td>\n",
       "      <td>Pre-endocrine</td>\n",
       "      <td>-0.224902</td>\n",
       "      <td>-0.252071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAACCTGAGCCTTGAT</th>\n",
       "      <td>Ductal</td>\n",
       "      <td>Ductal</td>\n",
       "      <td>-0.014707</td>\n",
       "      <td>-0.232610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAACCTGAGGCAATTA</th>\n",
       "      <td>Endocrine</td>\n",
       "      <td>Alpha</td>\n",
       "      <td>-0.171255</td>\n",
       "      <td>-0.286834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAACCTGCATCATCCC</th>\n",
       "      <td>Ductal</td>\n",
       "      <td>Ductal</td>\n",
       "      <td>0.599244</td>\n",
       "      <td>0.191243</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAACCTGGTAAGTGGC</th>\n",
       "      <td>Ngn3 high EP</td>\n",
       "      <td>Ngn3 high EP</td>\n",
       "      <td>-0.179981</td>\n",
       "      <td>-0.126030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TTTGTCAAGTGACATA</th>\n",
       "      <td>Pre-endocrine</td>\n",
       "      <td>Pre-endocrine</td>\n",
       "      <td>-0.235896</td>\n",
       "      <td>-0.266101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TTTGTCAAGTGTGGCA</th>\n",
       "      <td>Ngn3 high EP</td>\n",
       "      <td>Ngn3 high EP</td>\n",
       "      <td>0.279374</td>\n",
       "      <td>-0.204047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TTTGTCAGTTGTTTGG</th>\n",
       "      <td>Ductal</td>\n",
       "      <td>Ductal</td>\n",
       "      <td>-0.045692</td>\n",
       "      <td>-0.208907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TTTGTCATCGAATGCT</th>\n",
       "      <td>Endocrine</td>\n",
       "      <td>Alpha</td>\n",
       "      <td>-0.240576</td>\n",
       "      <td>-0.206865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TTTGTCATCTGTTTGT</th>\n",
       "      <td>Endocrine</td>\n",
       "      <td>Epsilon</td>\n",
       "      <td>-0.136407</td>\n",
       "      <td>-0.184763</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3696 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 clusters_coarse       clusters   S_score  G2M_score\n",
       "index                                                               \n",
       "AAACCTGAGAGGGATA   Pre-endocrine  Pre-endocrine -0.224902  -0.252071\n",
       "AAACCTGAGCCTTGAT          Ductal         Ductal -0.014707  -0.232610\n",
       "AAACCTGAGGCAATTA       Endocrine          Alpha -0.171255  -0.286834\n",
       "AAACCTGCATCATCCC          Ductal         Ductal  0.599244   0.191243\n",
       "AAACCTGGTAAGTGGC    Ngn3 high EP   Ngn3 high EP -0.179981  -0.126030\n",
       "...                          ...            ...       ...        ...\n",
       "TTTGTCAAGTGACATA   Pre-endocrine  Pre-endocrine -0.235896  -0.266101\n",
       "TTTGTCAAGTGTGGCA    Ngn3 high EP   Ngn3 high EP  0.279374  -0.204047\n",
       "TTTGTCAGTTGTTTGG          Ductal         Ductal -0.045692  -0.208907\n",
       "TTTGTCATCGAATGCT       Endocrine          Alpha -0.240576  -0.206865\n",
       "TTTGTCATCTGTTTGT       Endocrine        Epsilon -0.136407  -0.184763\n",
       "\n",
       "[3696 rows x 4 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata.obs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7ac5413-ee1a-40d4-8e3c-e7d4539714e9",
   "metadata": {},
   "source": [
    "Gene names are saved "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "78b1501a-068e-41a8-9a17-b173c6deb850",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T02:51:36.094924Z",
     "iopub.status.busy": "2022-09-27T02:51:36.094208Z",
     "iopub.status.idle": "2022-09-27T02:51:36.104608Z",
     "shell.execute_reply": "2022-09-27T02:51:36.103761Z",
     "shell.execute_reply.started": "2022-09-27T02:51:36.094893Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>highly_variable_genes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Xkr4</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gm37381</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rp1</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rp1-1</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sox17</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gm28672</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gm28670</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gm29504</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gm20837</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Erdr1</th>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>27998 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        highly_variable_genes\n",
       "index                        \n",
       "Xkr4                    False\n",
       "Gm37381                   NaN\n",
       "Rp1                       NaN\n",
       "Rp1-1                     NaN\n",
       "Sox17                     NaN\n",
       "...                       ...\n",
       "Gm28672                   NaN\n",
       "Gm28670                   NaN\n",
       "Gm29504                   NaN\n",
       "Gm20837                   NaN\n",
       "Erdr1                    True\n",
       "\n",
       "[27998 rows x 1 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata.var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "697e4afe-2355-467d-9b38-511b1ca6cf52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T02:51:36.548039Z",
     "iopub.status.busy": "2022-09-27T02:51:36.547313Z",
     "iopub.status.idle": "2022-09-27T02:51:36.553659Z",
     "shell.execute_reply": "2022-09-27T02:51:36.552763Z",
     "shell.execute_reply.started": "2022-09-27T02:51:36.548008Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['AAACCTGAGAGGGATA', 'AAACCTGAGCCTTGAT', 'AAACCTGAGGCAATTA',\n",
       "       'AAACCTGCATCATCCC', 'AAACCTGGTAAGTGGC', 'AAACCTGGTATTAGCC',\n",
       "       'AAACCTGTCCCTCTTT', 'AAACCTGTCTTTCCTC', 'AAACGGGAGACAATAC',\n",
       "       'AAACGGGAGATATGGT',\n",
       "       ...\n",
       "       'TTTGGTTCACCAGATT', 'TTTGGTTCACGAAGCA', 'TTTGGTTTCACTTACT',\n",
       "       'TTTGGTTTCCTTTCGG', 'TTTGTCAAGAATGTGT', 'TTTGTCAAGTGACATA',\n",
       "       'TTTGTCAAGTGTGGCA', 'TTTGTCAGTTGTTTGG', 'TTTGTCATCGAATGCT',\n",
       "       'TTTGTCATCTGTTTGT'],\n",
       "      dtype='object', name='index', length=3696)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata.obs_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dac72415-179d-4635-9594-f651bff70149",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T02:51:37.263199Z",
     "iopub.status.busy": "2022-09-27T02:51:37.262837Z",
     "iopub.status.idle": "2022-09-27T02:51:37.269249Z",
     "shell.execute_reply": "2022-09-27T02:51:37.268250Z",
     "shell.execute_reply.started": "2022-09-27T02:51:37.263171Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Xkr4', 'Gm37381', 'Rp1', 'Rp1-1', 'Sox17', 'Gm37323', 'Mrpl15',\n",
       "       'Rgs20', 'Npbwr1', '4732440D04Rik',\n",
       "       ...\n",
       "       'Gm28406', 'Gm29436', 'Gm28407', 'Gm29393', 'Gm21294', 'Gm28672',\n",
       "       'Gm28670', 'Gm29504', 'Gm20837', 'Erdr1'],\n",
       "      dtype='object', name='index', length=27998)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata.var_names"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2606cda3-2ed6-49f3-b314-d94f0bd36174",
   "metadata": {},
   "source": [
    "There are two layers corresponding to spliced and unspliced transcripts respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b60b7275-2f03-4858-9236-e231016c9cb2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T02:51:38.430052Z",
     "iopub.status.busy": "2022-09-27T02:51:38.429176Z",
     "iopub.status.idle": "2022-09-27T02:51:38.436692Z",
     "shell.execute_reply": "2022-09-27T02:51:38.435717Z",
     "shell.execute_reply.started": "2022-09-27T02:51:38.430011Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<3696x27998 sparse matrix of type '<class 'numpy.float32'>'\n",
       "\twith 9298890 stored elements in Compressed Sparse Row format>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata.layers['spliced']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1e97627e-e501-41f3-9384-c97b77e9d77a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T02:51:39.105253Z",
     "iopub.status.busy": "2022-09-27T02:51:39.104580Z",
     "iopub.status.idle": "2022-09-27T02:51:39.110869Z",
     "shell.execute_reply": "2022-09-27T02:51:39.109999Z",
     "shell.execute_reply.started": "2022-09-27T02:51:39.105219Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<3696x27998 sparse matrix of type '<class 'numpy.float32'>'\n",
       "\twith 3156504 stored elements in Compressed Sparse Row format>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata.layers['unspliced']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17aa201f-56a2-4b5f-8a0f-82a26b396fe5",
   "metadata": {},
   "source": [
    "PCA and UMAP have retained 50 and 2 dimensions respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "cab4cc2e-6a74-441d-92ec-f9a32b751d34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T02:51:40.434171Z",
     "iopub.status.busy": "2022-09-27T02:51:40.433445Z",
     "iopub.status.idle": "2022-09-27T02:51:40.438954Z",
     "shell.execute_reply": "2022-09-27T02:51:40.438069Z",
     "shell.execute_reply.started": "2022-09-27T02:51:40.434138Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AxisArrays with keys: X_pca, X_umap\n",
      "(3696, 50)\n",
      "AxisArrays with keys: X_pca, X_umap\n",
      "(3696, 2)\n"
     ]
    }
   ],
   "source": [
    "print(adata.obsm)\n",
    "print(adata.obsm['X_pca'].shape)\n",
    "print(adata.obsm)\n",
    "print(adata.obsm['X_umap'].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c31fedc0-24d6-4547-a8e9-926642fcb238",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T02:51:41.050050Z",
     "iopub.status.busy": "2022-09-27T02:51:41.049172Z",
     "iopub.status.idle": "2022-09-27T02:51:41.054541Z",
     "shell.execute_reply": "2022-09-27T02:51:41.053530Z",
     "shell.execute_reply.started": "2022-09-27T02:51:41.050019Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AxisArrays with keys: \n"
     ]
    }
   ],
   "source": [
    "print(adata.varm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "cdf4ca1d-2427-415c-b32a-5b3e6beee969",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T02:51:41.658352Z",
     "iopub.status.busy": "2022-09-27T02:51:41.657595Z",
     "iopub.status.idle": "2022-09-27T02:51:41.663233Z",
     "shell.execute_reply": "2022-09-27T02:51:41.662335Z",
     "shell.execute_reply.started": "2022-09-27T02:51:41.658318Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PairwiseArrays with keys: distances, connectivities\n",
      "(3696, 3696)\n",
      "PairwiseArrays with keys: distances, connectivities\n",
      "(3696, 3696)\n"
     ]
    }
   ],
   "source": [
    "print(adata.obsp)\n",
    "print(adata.obsp['distances'].shape)\n",
    "print(adata.obsp)\n",
    "print(adata.obsp['connectivities'].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e52aefdc-d85b-4286-a0dc-311816286144",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T02:51:42.430204Z",
     "iopub.status.busy": "2022-09-27T02:51:42.429489Z",
     "iopub.status.idle": "2022-09-27T02:51:42.434618Z",
     "shell.execute_reply": "2022-09-27T02:51:42.433562Z",
     "shell.execute_reply.started": "2022-09-27T02:51:42.430172Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PairwiseArrays with keys: \n"
     ]
    }
   ],
   "source": [
    "print(adata.varp)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "345e74f3-1928-47a8-ae7d-6832a9560d78",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    },
    "tags": []
   },
   "source": [
    "The data appears to contain reads mapped to 34546 RNA molecule-associated features and 6099 cell-associated barcodes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b385f037-96cd-48e5-a1c8-fb141b7f1c91",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "jupytext": {
   "cell_metadata_json": true,
   "formats": "ipynb,md,py:percent",
   "notebook_metadata_filter": "all"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.7"
  },
  "rise": {
   "scroll": true,
   "theme": "black"
  },
  "toc-autonumbering": true,
  "toc-showcode": false,
  "toc-showmarkdowntxt": false,
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
